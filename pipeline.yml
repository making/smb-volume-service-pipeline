---
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: czero/azure-blobstore-resource
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: pcf-pipelines
  type: git
  source:
    uri: https://github.com/pivotal-cf/pcf-pipelines.git
    tag_filter: v0.23.5
- name: template
  type: git
  source:
    uri: https://github.com/making/smb-volume-service-pipeline.git
- name: terraform-state
  type: azure-blobstore
  source:
    storage_account_name: ((terraform_azure_storage_account_name))
    storage_account_key: ((terraform_azure_storage_access_key))
    container: ((azure_storage_container_name))
    versioned_file: terraform.tfstate
- name: pivnet-product
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: smb-volume-service

jobs:
- name: bootstrap-terraform-state
  build_logs_to_retain: 5
  serial: true
  plan:
  - aggregate:
    - get: pcf-pipelines
  - task: create-terraform-state
    params:
      AZURE_STORAGE_ACCOUNT: ((terraform_azure_storage_account_name))
      AZURE_STORAGE_KEY: ((terraform_azure_storage_access_key))
      CONTAINER: ((azure_storage_container_name))
    file: pcf-pipelines/install-pcf/azure/tasks/create-initial-terraform-state/task.yml

- name: pave-azure
  build_logs_to_retain: 5
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: tfstate-output/terraform.tfstate
  plan:
  - aggregate:
    - get: template
    - get: terraform-state
  - task: terraform-apply
    params:
      TFVARS: ((tfvars))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: light
      inputs:
      - name: template
      - name: terraform-state
      outputs:
      - name: tfstate-output
      run:
        path: sh
        args: 
        - -c
        - |
          set -e

          cat <<EOF > terraform.tfvars
          ${TFVARS}
          EOF
          terraform init \
                    template/terraform
          terraform plan \
                    -var-file terraform.tfvars \
                    -out terraform.tfplan \
                    -state terraform-state/terraform.tfstate \
                    template/terraform
          terraform apply \
                    -state-out tfstate-output/terraform.tfstate \
                    terraform.tfplan

- name: upload-product
  build_logs_to_retain: 5
  serial: true
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - pave-azure
      trigger: true
    - get: pcf-pipelines
    - get: pivnet-product
      params:
        globs:
        - "*.pivotal"
  - task: upload-tile
    file: pcf-pipelines/tasks/upload-product-and-stemcell/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_api_token))
      NO_PROXY: ""
      OM_IP: ""
      IAAS: ((iaas))
  - task: stage-tile
    file: pcf-pipelines/tasks/stage-product/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
      OPSMAN_USERNAME: ((ops_mgr_usr))
      OPSMAN_PASSWORD: ((ops_mgr_pwd))

- name: configure-product
  build_logs_to_retain: 5
  serial: true
  plan:
  - aggregate:
    - get: terraform-state
      passed:
      - upload-product
      trigger: true
  - task: configure-product
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_NAME: smb-volume-service
      SERVICE_NAMEWORK_NAME: ((service-network-name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
          tag: 1.0.14
      inputs:
      - name: terraform-state
      run:
        path: bash
        args: 
        - -c
        - |
          set -e
          cp /usr/local/bin/om-linux /usr/local/bin/om
          cp terraform-state/terraform.tfstate ./

          SUBSCRIPTION_ID=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.subscription_id.value')
          TENANT_ID=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.tenant_id.value')
          CLIENT_ID=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.client_id.value')
          CLIENT_SECRET=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.client_secret.value')
          RESOURCE_GROUP_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.resource_group_name.value') 
          LOCATION=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.location.value')           
          DB_HOST=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.sql_server_hostname.value')
          DB_PORT=1434
          DB_NAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.sql_server_database.value')
          DB_USERNAME=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.sql_server_administrator.value')
          DB_PASSWORD=$(cat terraform-state/terraform.tfstate | jq -r '.modules[0].outputs.sql_server_administrator_password.value')

          cat <<EOF > config.yml
          ---
          product-properties:
            .properties.environment_selector:
              value: Azure File Share
            .properties.environment_selector.azure_option.environment:
              value: AzureCloud
            .properties.environment_selector.azure_option.tenantid:
              value: $TENANT_ID
            .properties.environment_selector.azure_option.clientid:
              value: $CLIENT_ID
            .properties.environment_selector.azure_option.defaultsubscriptionid:
              value: $SUBSCRIPTION_ID
            .properties.environment_selector.azure_option.clientsecret:
              value: 
                secret: $CLIENT_SECRET
            .properties.environment_selector.azure_option.defaultresourcegroupname:
              value: $RESOURCE_GROUP_NAME
            .properties.environment_selector.azure_option.defaultlocation:
              value: $LOCATION
            .properties.dbdrivername:
              value: mssql
            .properties.database_selector:
              value: Existing External Database
            .properties.database_selector.database_option.dbhost:
              value: $DB_HOST
            .properties.database_selector.database_option.dbport:
              value: $DB_PORT
            .properties.database_selector.database_option.dbname:
              value: $DB_NAME
            .properties.database_selector.database_option.dbusername:
              value: $DB_USERNAME
            .properties.database_selector.database_option.dbpassword:
              value: 
                secret: "$DB_PASSWORD"
          network-properties:
            network:
              name: $SERVICE_NAMEWORK_NAME
            other_availability_zones:
            - name: "null"
            singleton_availability_zone:
              name: "null"
          EOF

          cat config.yml

          om --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
             --username "$OPS_MGR_USR" \
             --password "$OPS_MGR_PWD" \
             --skip-ssl-validation \
             configure-product \
             --product-name "${PRODUCT_NAME}" \
             --config config.yml

          # Errands
          for e in \
            deploy-all \
            ;do
            om --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
             --username "$OPS_MGR_USR" \
             --password "$OPS_MGR_PWD" \
             --skip-ssl-validation \
             set-errand-state \
             --product-name "${PRODUCT_NAME}" \
             --errand-name="${e}" \
             --post-deploy-state=when-changed
          done
- name: deploy-product
  build_logs_to_retain: 5
  serial: true
  plan:
  - aggregate:
    - get: pcf-pipelines
    - get: terraform-state
      passed:
      - configure-product
      trigger: true
  - task: deploy-product
    file: pcf-pipelines/tasks/apply-changes/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((ops_mgr_usr))
      OPSMAN_PASSWORD: ((ops_mgr_pwd))
      OPSMAN_CLIENT_ID: ""
      OPSMAN_CLIENT_SECRET: ""
